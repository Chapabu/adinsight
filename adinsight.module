<?php

/*
 * Implements hook_menu()
 */

function adinsight_menu() {
  $items = array();

  $items['admin/config/services/adinsight'] = array(
    'title' => 'AdInsight',
    'description' => 'Configure the AdInsight field formatter.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('adinsight_admin'),
    'access callback' => TRUE,
    'file' => 'adinsight.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_init()
 */
function adinsight_init() {

  $path_is_admin = path_is_admin(current_path());
  $adinsightid = variable_get('adinsight_id', NULL);

  //We don't need the script on the admin pages - so check if the user is on an 
  //admin page, and then return nothing if they are

  if (is_null($adinsightid) && $path_is_admin == TRUE) {
    drupal_set_message(t('You haven\'t set your AdInsight ID yet. You can do it !here.', array('!here' => l(t('here'), 'admin/config/services/adinsight'))));
  }
  //Only add the scripts if the AdInsight ID is set
  if (!is_null($adinsightid) && $path_is_admin == FALSE) {
    $settings = array();

    $settings['adinsight'] = array(
      'id' => $adinsightid,
    );

    drupal_add_js($settings, array('type' => 'setting'));
    drupal_add_js(drupal_get_path('module', 'adinsight') . '/adinsight.js', array('type' => 'file', 'scope' => 'header', 'weight' => 5));
  }
}

/*
 * Implements hook_field_info()
 */
function adinsight_field_info() {
  return array(
    'adinsight_phone_number' => array(
      'label' => t('AdInsight'),
      'description' => t('Display AdInsight tracked phone number'),
      'default_widget' => 'adinsight_phone_widget',
      'default_formatter' => 'adinsight_phone_formatter'
    )
  );
}

/*
 * Implements hook_field_is_empty().
 */
function adinsight_field_is_empty($item, $field) { 
  return empty($item['adinsight_id']);
}

/*
 * Implements hook_widget_info().
 */
function adinsight_field_widget_info() {
  return array(
    'adinsight_phone_widget' => array(
      'label' => t('AdInsight provided phone number.'),
      'field types' => array('adinsight_phone_number')
      ),
  );
}

/*
 * Implements hook_field_widget_form().
 */
function adinsight_field_widget_form(&$form, &$form_state, $field, $instance, $lancode, $items, $delta, $element) {
  $adinsight_id = isset($items[$delta]['adinsight_id']) ? $items[$delta]['adinsight_id'] : '';
  $adinsight_fallback = isset($items[$delta]['adinsight_fallback']) ? $items[$delta]['adinsight_fallback'] : '';
  
  $widget = $element;
  $widget['#delta'] = $delta;
  
  switch ($instance['widget']['type']) {
    case 'adinsight_phone_widget':
      $widget += array(
        '#type' => 'fieldset',
        '#element_' => array('adinsight_phone_field_validate'),
        '#delta' => $delta
      );
      
      $widget['adinsight_id'] = array(
        '#type' => 'textfield',
        '#title' => t('AdInsight phone number ID'),
        '#default_value' => $adinsight_id,
      );
      
      $widget['adinsight_fallback'] = array(
        '#type' => 'textfield',
        '#title' => t('Fallback phone number'),
        '#default_value' => $adinsight_fallback,
      );
      
      break;
  }
  
  return $widget;
}

/**
 * Widget validation
 * 
 * @see adinsight_field_widget_form()
 */
function adinsight_phone_field_validate($element, &$form_state) {
  $delta = $element['#delta'];
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
  $adinsight_id = $form_state['values'][$field_name][$element['#language']][$delta]['adinsight_id'];
  $adinsight_fallback = $form_state['values'][$field_name][$element['#language']][$delta]['adinsight_fallback'];
  
  if (!empty($adinsight_id) && empty($adinsight_fallback)) {
    form_error($element, t('There needs to be a fallback phone number for every AdInsight number.'));
  }
}
/**
 * Implements hook_field_formatter_info()
 */
function adinsight_field_formatter_info() {
  return array(
    'adinsight_phone_formatter' => array(
      'label' => t('AdInsight number'),
      'field types' => array('adinsight_phone_number'),
    ),
  );
}

/*
 * Implements hook_field_formatter_view().
 */

function adinsight_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'adinsight_phone_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = theme('adinsight_phone_formatter', array('element' => $item, 'field' => $instance));
      }
      break;
  }
  
  return $element;
}

/*
 * Implements hook_theme().
 */

function adinsight_theme() {
  return array(
    'adinsight_phone_formatter' => array(
      'variables' => array('element' => NULL)
    )
  );
}

/*
 * Theme the field containing the phone number.
 */
function theme_adinsight_phone_formatter($variables) {
  $values = $variables['element'];
  
  if (!is_null($values['adinsight_id'])) {
    return '<span class="adinsight-number adinsightNumber' . $values['adinsight_id'] . '">' . $values['adinsight_fallback'] . '</span>';
  }
  else {
    return '<span class="adinsight-number">' . $values['adinsight_fallback'] . '</span>';
  }
  
}